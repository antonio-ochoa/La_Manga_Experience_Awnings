---
import { getI18N } from "@i18n/index";
const i18n = getI18N(Astro, "index").CONTACT_US_SECTION;
const form = i18n.CONTACT_FORM;
const name = form.LABELS.NAME;
const phone = form.LABELS.PHONE;
const msg = form.LABELS.MESSAGE;
const btn = form.BTN_TITLE

---

<div class="contact-form">
    <h2>{form.TITLE}</h2>
    <form method="post" data-lang={Astro.currentLocale ?? "en"}>
        <div class="label-mix">
            <label>{name.TITLE}<input type="text" name="name" placeholder={name.PLACEHOLDER} required></label>
            <label>{phone.TITLE} <input type="tel" name="phone" placeholder={phone.PLACEHOLDER} required></label>
        </div>
        <label>{msg.TITLE}<textarea name="message" rows="4" placeholder={msg.PLACEHOLDER}></textarea></label>
        <button 
            class="btn-tertiary" 
            data-default={btn.DEFAULT} 
            data-submitting={btn.SUBMITTING} 
            data-sent={btn.SENT} 
            data-error={btn.ERROR}
        >
            {btn.DEFAULT}
        </button>
    </form>
</div>

<style>
    .contact-form {
        max-width: 496px;
        width: 100%;
    }
    .contact-form h2 { margin-bottom: 24px }
    .contact-form form .label-mix {
        display: flex;
        flex-direction: column;
        gap: 20px 40px;
    }
    .contact-form form label {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 6px;
        text-align: left;
    }
    .contact-form form label:has(textarea) {
        margin-block: 20px 32px;
    }
    .contact-form form input, .contact-form form textarea {
        box-sizing: border-box;
        width: 100%;
        height: 35px;
        padding: 8px;
        border: none;
        border-radius: 4px;
        background-color: white;
        font-size: 16px;
    }
    .contact-form form input::placeholder, .contact-form form textarea::placeholder {
        color: color-mix(in srgb, var(--black) 30%, transparent);
    }
    .contact-form form textarea { height: auto }
    .contact-form form button {
        box-sizing: border-box;
        padding: 12px 32px;
        border: 1px solid white;
        border-radius: 24px;
        cursor: pointer;
        text-transform: uppercase;
        color: white;
        font-size: 16px;
    }
    .contact-form form button:hover {
        background-color: var(--black);
    }
    .contact-form form button.sending { background-color: color-mix(in srgb, white 60%, black) }
    .contact-form form button.sending:hover, .contact-form form button.sending:active { transform: none; cursor: default }
    .contact-form form button.sending.sent { background-color: greenyellow }

    @media screen and (min-width: 480px) { .contact-form form .label-mix { flex-direction: row } }
    @media screen and (min-width: 1280px) { .contact-form { max-width: 496px } }
</style>

<script>
    window.addEventListener("load", () => {
        const contactForm = document.querySelector(".contact-form form") as HTMLFormElement;
        const contactButton = contactForm?.querySelector("button") as HTMLButtonElement;

		if ( contactForm && contactButton ) {

            const btnDefault = contactButton.getAttribute("data-default") ?? "Send Message";
            const btnSubmitting = contactButton.getAttribute("data-submitting") ?? "Submitting...";
            const btnSent = contactButton.getAttribute("data-sent") ?? "Sent!";
            const btnError = contactButton.getAttribute("data-error") ?? "Error -.-";

			contactForm.addEventListener("submit", function (e) {
				e.preventDefault(); // Prevent the default form submission
                
                contactButton.innerHTML = btnSubmitting;
				contactButton.disabled = true;
                contactButton.classList.add("sending")

				// Collect the form data
				let formData = new FormData(this);
				let keyValuePairs = [];
				for (let pair of formData.entries()) {
				keyValuePairs.push(pair[0] + "=" + pair[1]);
				}

				let formDataString = keyValuePairs.join("&");

				// Send a POST request to your Google Apps Script
				fetch(
				"https://script.google.com/macros/s/AKfycbzRZTontarNz7kjuOw-jopGF4uJ2UBOQ49qa8E5uXPybJ3dpgbeHk8PUcfs7b46dUOvVg/exec",
				{
					redirect: "follow",
					method: "POST",
					body: formDataString,
					headers: {
					"Content-Type": "text/plain;charset=utf-8",
					},
				}
				)
				.then(function (response) {
					// Check if the request was successful
					if (response) {
						return response; // Assuming your script returns JSON response
					} else {
						throw new Error("Failed to submit the form.");
					}
				})
				.then(function (data) {
                    contactButton.innerHTML = btnSent;
					contactButton.classList.add('sent');
					contactButton.disabled = false;

					contactForm.reset();

					setTimeout(function () {
                        contactButton.innerHTML = btnDefault;
                        contactButton.classList.remove("sending","sent");
					}, 3000);
				})
				.catch(function (error) {
					console.error(error);
                    contactButton.innerHTML = btnError;
				});
			});
		}
	})
</script>